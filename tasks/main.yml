---
- name: import distro specific vars
  include_vars:
    dir: vars
    files_matching: "{{ proxmox_cloudimage_distro +'.yml' }}"

- name: assign default values
  ansible.builtin.set_fact:
    proxmox_cloudimage_release: "{{ proxmox_cloudimage_release | default(default_proxmox_cloudimage_release) }}"
    proxmox_cloudimage_repo_subdir: "{{ proxmox_cloudimage_repo_subdir | default(default_proxmox_cloudimage_repo_subdir) }}"
    proxmox_cloudimage_hashtype: "{{ proxmox_cloudimage_hashtype | default(default_proxmox_cloudimage_hashtype) }}"
    proxmox_cloudimage_type: "{{ proxmox_cloudimage_type | default(default_proxmox_cloudimage_type) }}"
    proxmox_cloudimage_format: "{{ proxmox_cloudimage_format | default(default_proxmox_cloudimage_format) }}"
    proxmox_cloudimage_repo_url: "{{ proxmox_cloudimage_repo_url | default(default_proxmox_cloudimage_repo_url) }}"

- name: get the name and url of the cloudimage file
  import_tasks: proxmox_cloudimage_url.yml

- name: remove the extension from the image filename to get the vm name
  ansible.builtin.set_fact:
    proxmox_cloudimage_template_name: "{{ proxmox_cloudimage_filename.rsplit('.', 1)[0] }}"

- name: append releasedate to templatename
  ansible.builtin.set_fact:
    proxmox_cloudimage_template_name: "{{ proxmox_cloudimage_template_name +'-'+ proxmox_cloudimage_release }}"
  when: proxmox_cloudimage_distro == "ubuntu"

- name: get list of vms
  ansible.builtin.command: qm list
  changed_when: false
  register: qmlist

- name: check if vm exists and get its vmid
  ansible.builtin.set_fact:
    proxmox_cloudimage_template_existed: "{{ proxmox_cloudimage_template_name in qmlist.stdout }}"
    proxmox_cloudimage_template_created: false

- name: store vmid of the existing vm
  ansible.builtin.set_fact:
    proxmox_cloudimage_template_vmid: "{{ qmlist.stdout | regex_search('(\\d+) %s' % proxmox_cloudimage_template_name, '\\1') | first }}"
  when: proxmox_cloudimage_template_existed

- name: get the next free vmid
  ansible.builtin.command: pvesh get /cluster/nextid
  changed_when: false
  register: nextid
  when: not proxmox_cloudimage_template_existed

- name: store vmid of the new vm
  ansible.builtin.set_fact:
    proxmox_cloudimage_template_vmid: "{{ nextid.stdout }}"
  when: not proxmox_cloudimage_template_existed

- name: create the template vm
  ansible.builtin.command: >-
    qm create {{ proxmox_cloudimage_template_vmid }}
    -name {{ proxmox_cloudimage_template_name }}
    -template 1 -ostype l26 -agent 1
    -scsihw virtio-scsi-pci
    -boot c -bootdisk virtio0
    -net0 virtio,bridge=vmbr0 -serial0 socket -vga serial0
    -ide2 {{ proxmox_template_storage }}:cloudinit
    -rng0 source=/dev/random
    {{ "-pool %s" % proxmox_template_pool if proxmox_template_pool is defined }}
  when: not proxmox_cloudimage_template_existed

- name: get the checksum of the cloudimage file
  import_tasks: proxmox_cloudimage_checksum.yml
  when: not proxmox_cloudimage_template_existed

- block:
    - name: download the image
      ansible.builtin.get_url:
        url: "{{ proxmox_cloudimage_url }}"
        dest: "/tmp/{{ proxmox_cloudimage_filename }}"
        checksum: "{{ proxmox_cloudimage_hashtype }}:{{ proxmox_cloudimage_checksum }}"
        mode: 0644

    - name: install libguestfs-tools
      ansible.builtin.apt:
        name: libguestfs-tools
        state: present
      when: proxmox_cloudimage_qemuagent or 'bookworm' in proxmox_cloudimage_repo_subdir

    - name: add qemu-guest-agent
      ansible.builtin.command: virt-customize -a /tmp/{{ proxmox_cloudimage_filename }} --install qemu-guest-agent
      changed_when: true
      when: proxmox_cloudimage_qemuagent

    - name: regenerate machine-id
      when: "'bookworm' in proxmox_cloudimage_repo_subdir"
      block:
      - name: remove /etc/machine-id
        ansible.builtin.command: virt-customize -a /tmp/{{ proxmox_cloudimage_filename }} --delete /etc/machine-id
        changed_when: true

      - name: copy cloudinit-config to temporary directory
        ansible.builtin.copy:
          src: cloudinit-bookworm-fix.cfg
          dest: /tmp/99-bookworm-fix.cfg
          owner: root
          group: root
          mode: 0644

      - name: add cloudimageconfig
        ansible.builtin.command: 
          cmd: virt-customize -a /tmp/{{ proxmox_cloudimage_filename }} --copy-in /tmp/99-bookworm-fix.cfg:/etc/cloud/cloud.cfg.d
        changed_when: true

    - name: set import facts
      ansible.builtin.set_fact:
        proxmox_cloudimage_import_args: --format {{ proxmox_cloudimage_format }}
      when: proxmox_cloudimage_format in ['raw', 'qcow2', 'vmdk']

    - name: set import facts
      ansible.builtin.set_fact:
        proxmox_cloudimage_import_args: ""
      when: not proxmox_cloudimage_format in ['raw', 'qcow2', 'vmdk']

    - name: import the image to the template vm
      ansible.builtin.command: >-
        qm importdisk {{ proxmox_cloudimage_template_vmid }}
        /tmp/{{ proxmox_cloudimage_filename }}
        {{ proxmox_template_storage }} {{ proxmox_cloudimage_import_args }}
      register: qmimportdisk
      failed_when: 
        - "'successfully imported disk' not in qmimportdisk.stdout"
        - "'Successfully imported disk' not in qmimportdisk.stdout"
      changed_when: true

    - name: attach the disk as virtio0
      ansible.builtin.command: >-
        qm set {{ proxmox_cloudimage_template_vmid }}
        -virtio0 {{ qmimportdisk.stdout | regex_search("imported disk (as )?'(unused\d+:)?([^']+)'", "\3") | first }},{{ ",%s" % proxmox_cloudimage_diskparams if proxmox_cloudimage_diskparams is defined }}
      register: qmset
      changed_when: true
    
    - name: store proxmox_cloudimage_template_created=true
      ansible.builtin.set_fact:
        proxmox_cloudimage_template_created: true

  rescue:
    - name: something failed, remove the vm that is left without a disk
      ansible.builtin.command: >-
        qm destroy {{ proxmox_cloudimage_template_vmid }} -destroy-unreferenced-disks 1
      changed_when: true

  always:
    - name: clean up the temporary file
      ansible.builtin.file:
        path: "/tmp/{{ proxmox_cloudimage_filename }}"
        state: absent
      when: not proxmox_cloudimage_keep

    - name: remove cloudinit fix
      ansible.builtin.file:
        path: /tmp/99-bookworm-fix.cfg
        state: absent

  when: not proxmox_cloudimage_template_existed
